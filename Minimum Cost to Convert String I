class Solution {
public:

  const int INF = INT_MAX / 2;  // Use a large number as infinity

void floydWarshall(vector<vector<int>>& dist) {
    int numChars = dist.size();
    for (int k = 0; k < numChars; ++k) {
        for (int i = 0; i < numChars; ++i) {
            for (int j = 0; j < numChars; ++j) {
                if (dist[i][k] < INF && dist[k][j] < INF) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }
}

  long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {

    int n = source.size();
    long long int numChars = 26;  // Number of lowercase English letters

    // Initialize the distance matrix with INF, except the diagonal with 0
    vector<vector<int>> dist(numChars, vector<int>(numChars, INF));
    for (int i = 0; i < numChars; ++i) {
        dist[i][i] = 0;
    }

    // Fill in the initial distances based on the given conversions
    for (int i = 0; i < original.size(); ++i) {
        int u = original[i] - 'a';
        int v = changed[i] - 'a';
        dist[u][v] = min(dist[u][v], cost[i]);
    }

    // Run the Floyd-Warshall algorithm to find the shortest path between all pairs of characters
    floydWarshall(dist);

    // Calculate the minimum cost to convert source to target
    long long int tcost = 0;
    for (int i = 0; i < n; ++i) {
        if (source[i] == target[i]) continue;
        
        int u = source[i] - 'a';
        int v = target[i] - 'a';
        
        if (dist[u][v] == INF) {
            return -1; // Conversion is not possible
        } else {
            tcost += dist[u][v];
        }
      }
        return tcost;
    }
};
