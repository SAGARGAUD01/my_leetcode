/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeNodes(ListNode* head) {
            ListNode* dummy = new ListNode(0); //dummy node 
    ListNode* current = dummy;
    ListNode* temp = head->next; // Skipping the first 0

    while (temp != nullptr) {
        int sum = 0;

        // Sum the values between two 0s
        while (temp != nullptr && temp->val != 0) {
            sum += temp->val;
            temp = temp->next;
        }

        // Create a new node with the sum if it's non-zero
        if (sum != 0) {
            current->next = new ListNode(sum);
            current = current->next;
        }

        if (temp != nullptr) {
            temp = temp->next;
        }
    }

    // Clean up the original head node
    ListNode* result = dummy->next;
    delete dummy;
    return result;

    }
};
