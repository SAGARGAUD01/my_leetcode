/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_del) {

     //to_del.begin()  from end();
        unordered_set<int> to_del_set(to_del.begin(),to_del.end());

        vector<TreeNode*> res;
       
        function<TreeNode*(TreeNode*, bool)> dfs = [&](TreeNode* node, bool isRoot) -> TreeNode* {
            if (!node) return nullptr;
            
            bool del = to_del_set.count(node->val) > 0;
            if (isRoot && !del) 
             res.push_back(node);
            
            node->left = dfs(node->left, del);
            node->right = dfs(node->right, del);
            
            return del ? nullptr : node;
        };
        
        dfs(root, true);
        return res;

    }
};
