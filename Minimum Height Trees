class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
     
         if(n == 1) return {0};
        vector<unordered_set<int>> adj(n); //adj list 
        for(auto& e: edges){ //for traversing
            //both are neighbour's 
            adj[e[0]].insert(e[1]);
            adj[e[1]].insert(e[0]);
        }
        
        queue<int> Q; //for leaf node'ss
        for(int i = 0; i < adj.size(); ++i)
            if(adj[i].size() == 1) Q.push(i);  //on each 1 ,keep in Q
        
        while(n > 2){ //for more than 2 node's
            int len = Q.size();
            n = n-len;
            for(int i = 0; i < len; ++i){
                int node = Q.front(); 
                Q.pop(); //release it
                
                for(auto& a: adj[node]){
                    adj[a].erase(node); //erase node
                    if(adj[a].size() == 1)
                        Q.push(a); //push in Q
                }
            }
        }
        vector<int> Ans;
        while(!Q.empty()){
            Ans.push_back(Q.front());
            Q.pop();
        }
        return Ans;
    }
};
