class Solution {
public:
    int longestCommonSubsequence(string t1, string t2) {
        int n = t1.size(),m= t2.size();
        
        vector<vector<int>> dp(n,vector(m,0));
        
        int c1=0,c2=0;
        
           for(int i1 = 0; i1 < n; i1++){
            for(int i2 = 0; i2 < m; i2++){
  //distinguish the case whether t1[i1] == t2[i2] or not so the same char won't be counted twice
                 if(t1[i1] == t2[i2]) {
                    dp[i1][i2] = ((i1>0 && i2>0) ? dp[i1-1][i2-1] : 0) + 1; //+1 for any case
                 }   else   {
                     dp[i1][i2] = max(((i1>0) ? dp[i1-1][i2] : 0),((i2>0) ? dp[i1][i2-1] : 0));
                 }
            // cout<<i1<<" " <<i2<<" "<<endl;
              }   
        }        
                                 
        return dp[n-1][m-1];
    }
                                 
};
