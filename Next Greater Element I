class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        
    /*--------- eficient approach (traversing from last using stack)-------- */
        
      if (nums2.empty() || nums1.empty()) //base case when both num1 & num2 empty()
            return std::vector<int>();

           unordered_map<int, int> mp;
           stack<int> stk;

        stk.push(nums2[nums2.size() - 1]); //push num2-array in stack with its size
        
        mp[nums2[nums2.size() - 1]] = -1; //set all -1 initially inside map

        for (int i = nums2.size() - 2; i >= 0; i--) { //traversing from the last
            if (nums2[i] < stk.top()) { //check whether the ele <from top ele of stack
                mp[nums2[i]] = stk.top(); //update map with stack top ele
                stk.push(nums2[i]); //push it in stack
                continue;
            }

            while (!stk.empty() && stk.top() < nums2[i])
                stk.pop(); //when tack top ele < nums[ele] && stack empty ,pop out

            if (stk.empty()) {
                stk.push(nums2[i]); //keep pushing in stack
                mp[nums2[i]] = -1; //return simply -1
                
            } else {
                mp[nums2[i]] = stk.top(); //update map with stack top ele
                stk.push(nums2[i]);  //ele will be pushed inside stack
            }
        }

        for (int i = 0; i < nums1.size(); i++)
            nums1[i] = mp[nums1[i]];  //nums1-array ele will work as index of map

        return nums1;   }
};
