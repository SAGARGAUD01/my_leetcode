/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nodesBetweenCriticalPoints(ListNode* head) {
         if (!head || !head->next || !head->next->next) return {-1, -1};
    
    ListNode* prev = head;
    ListNode* curr = head->next;
    ListNode* next = curr->next;
    
    int firstCriticalIndex = -1;
    int lastCriticalIndex = -1;
    int minDistance = INT_MAX;
    int index = 1;
    int prevCriticalIndex = -1;
    
    while (next) {
        if ((curr->val > prev->val && curr->val > next->val) || 
            (curr->val < prev->val && curr->val < next->val)) {
            if (firstCriticalIndex == -1) {
                firstCriticalIndex = index;
            } else {
                minDistance = std::min(minDistance, index - prevCriticalIndex);
            }
            prevCriticalIndex = index;
            lastCriticalIndex = index;
        }
        prev = curr;
        curr = next;
        next = next->next;
        index++;
    }
    
    if (firstCriticalIndex == lastCriticalIndex) {
        return {-1, -1};
    }
    
    int maxDistance = lastCriticalIndex - firstCriticalIndex;
    return {minDistance, maxDistance};
    }
};
