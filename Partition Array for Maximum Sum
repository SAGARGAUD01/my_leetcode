class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& arr, int K) {
        
        vector<int> dp(arr.size());  //array length dp vector
        
        for(int i = 0; i < arr.size(); i++){
            
            int curmax = 0; //current_maximum
            
            //split btw i-k and i-k+1, 0,...,i-k | (i-k+1, ... , i)
            //(i-k+1, ..., i) will all become curmax
            //from right to left
            
            for(int j = 1; j <= K && i-(j-1) >= 0; j++){ // j=0 to j <= i-(j-1) 
                curmax = max(curmax, arr[i-(j-1)]);
                
                //dp[i-k] + (dp[i-(k-1)] + ... + dp[i])
                //dp[i-(k-1)], ..., dp[i] all become curmax
                
                dp[i] = max(dp[i], ((i-j >= 0) ? dp[i-j] : 0) + curmax * j);
            }
            cout << dp[i] << endl;
        }
        
        return dp[arr.size()-1]; 
    }
    
};
