class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        
          string start = "0000"; //4 circular wheels
    if (start == target) return 0; //in case of same strings
    
    unordered_set<string> deads(deadends.begin(), deadends.end());
    if (deads.count(start)) return -1; //when start index count !=0
    
    queue<string> q;
    q.push(start);
    unordered_set<string> visited;
    visited.insert(start);
    
    int moves = 0;
    
    while (!q.empty()) {
        int sz = q.size();
        
        for (int i = 0; i < sz; ++i) {
            string current = q.front();
            q.pop();
            
            // Generate all possible next states by rotating each wheel
            for (int j = 0; j < 4; ++j) {
                // Rotate wheel 'j' forward
                string next = current;
                next[j] = (current[j] == '9') ? '0' : current[j] + 1;
                
                if (next == target) return moves + 1;
                if (!visited.count(next) && !deads.count(next)) {
                    q.push(next);
                    visited.insert(next);
                }
                
                // Rotate wheel 'j' backward
                next = current;
                next[j] = (current[j] == '0') ? '9' : current[j] - 1;
                
                if (next == target) return moves + 1;
                if (!visited.count(next) && !deads.count(next)) {
                    q.push(next);
                    visited.insert(next);
                }
            }
        }
        
        moves++;
    }
    
    return -1;
   }

};
