class Solution {
public:

    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
         vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
    
    for (int i = 0; i < n; ++i) {
        dist[i][i] = 0; //dis from itself as 0
    }

    // ini-dis based on the edges
    for (const auto& e : edges) {
        int u = e[0], v = e[1], w = e[2]; // [fromi, toi, weighti]
        dist[u][v] = w;
        dist[v][u] = w;
    }

    // Floyd-Warshall algorithm to compute all-pairs shortest paths
    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]); // min of all dis
                }
            }
        }
    }

    int resultCity = -1;
    int minReachableCities = INT_MAX;

    // Find the city with the smallest number of reachable cities within the distance threshold
    for (int i = 0; i < n; ++i) {
        int reachableCities = 0;
        for (int j = 0; j < n; ++j) {
            if (i != j && dist[i][j] <= distanceThreshold) {
                reachableCities++;
            }
        }

        if (reachableCities < minReachableCities || (reachableCities == minReachableCities && i > resultCity)) {
            minReachableCities = reachableCities;
            resultCity = i;
        }
    }

    return resultCity;
    }

};
